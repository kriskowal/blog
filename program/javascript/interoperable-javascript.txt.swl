1> Interoperable JavaScript Modules
!> vim:co=80:wrap:lbr: 

This year has begun with a combination of wondrous events in the JavaScript theatre.  I've been struggling to promote the idea of module system in JavaScript for several years now.  There has been a sudden explosion of progress.

It started with a series of prototypes for module loaders for < http://cixar.com/tale/wiki Tale > in college, which eventually developed into < http://modulesjs.com modules.js >, that over the last few years was refined by the development of the < http://chironjs.googlecode.com Chiron > module library.  I presented Chiron at BarCampLA last year, only succeeding to put < http://en.wikipedia.org/wiki/Dan_Kaminsky "Dan Kaminsky" > to sleep.  Before I left Apple and the bay area, I introduced myself to Mark Miller from the < http://code.google.com/p/google-caja/ "Google Caja" > team including < http://code.google.com/u/ihab.awad/ "Ihab Awad" > and < http://code.google.com/u/mikesamuel/ "Mike Samuel" > and discussed modules over lunch in Mountain View.  In May last year, < http://peter.michaux.ca/ Peter Michaux > and I started < http://groups.google.com/group/xjs-talk/browse_thread/thread/289ef7a423cbc1a5/dbcf40c099d9237c discussing > converging on a common module standard so that our Chiron and < http://groups.google.com/group/xjs-talk XJS > libraries could be interoperable, but that effort floundered.  However, Peter introduced me to the < http://dev.helma.org/ng/ "Helma NG" > project and < http://groups.google.com/groups/profile?enc_user=T_Vq-BEAAAAt9d9v6A8wjP0doSFNOVajkdEasx1kiYTQavV7mdW13Q "Hannes Wallnoefer" > which has a compatible notion about < http://dev.helma.org/ng/Modules+and+Scopes/ modules >.  We < http://groups.google.com/group/helma-ng/browse_thread/thread/6d002cb42a47ae42 converged > partially toward a < http://askawizard.blogspot.com/2008/09/javascript-module-standard_04.html standard > in August.  Peter was also kind enough to notify me when Ihab Awad started a < https://mail.mozilla.org/pipermail/es-discuss/2008-August/006915.html discussion > about modules on the ECMAScript standard discussion list.  I met up with the Caja team again in October for a full day to specifically design a module system that was both usable and securable.  We discovered a way to make a module system that looked just like any other, but also reused inert module factories for multiple sandboxes, addressing the need for dependency injection.

January this year, Mark Miller sent word to Ihab and me that we were on the agenda for the next ECMAScript committee meeting later that month to present a proposal for adding modules to a future version of JavaScript.  After extensive discussion, we nailed down a < http://docs.google.com/Doc?id=dfgxb7gk_34gpk37z9v&hl=en proposal > and Ihab flew down to LA to work on a < http://docs.google.com/Presentation?docid=dcd8d5dk_0cs639jg8&hl=en presentation > with me before the meeting.  We presented to the committee on the second day and it was received well.  The conversation focused on what additional requirements we would need to nail down to actually make the modules secure.

At about the same time, Kevin Dangoor from the < https://bespin.mozilla.com/ Bespin > team at Mozilla < http://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/ prompted > a massive < http://groups.google.com/group/serverjs discussion > that attracted a flash crowd of developers around the world who were interested in sharing code among JavaScript implementations outside the browser.  < http://www.blueskyonmars.com/2009/02/05/serverjs-one-week-into-building-a-better-javascript/ "One week later" >, with 224 members, and 653 messages posted, we knew Kevin had < http://peter.michaux.ca/articles/a-bright-future-for-standardized-server-side-javascript "struck a nerve" >.

The group founded the < https://wiki.mozilla.org/ServerJS ServerJS > project, and among the first common efforts was to converge on a < https://wiki.mozilla.org/ServerJS/Modules "module system" >.  Ihab and I camped out on the list promoting, receiving feedback, and refining a < https://wiki.mozilla.org/ServerJS/Modules/SecurableModules "securable module" > proposal.  There are now several efforts to create compliant module loaders for various platforms including < http://jackjs.org Jack > (which works on < http://www.mozilla.org/rhino/ Rhino > with < http://www.mortbay.org/ Jetty > and < http://sjs.sourceforge.net/ Simple >, and eventually < http://code.google.com/p/v8cgi/ v8cgi > among others), a project called JSEng or GPSE to be released eventually by Wes Garland at PageMail, < http://www.xucia.com/ "Kris Zyp's" > < http://code.google.com/p/persevere-framework/ Persevere >, and of course < http://code.google.com/p/chironjs/source/browse/branch/safe/src/modules.js Chiron >.  We're working on getting the various platforms passing < http://code.google.com/p/interoperablejs/source/browse/trunk/README "unit tests" > and sharing code.  I've got about 11KLOCs of Chiron ported to the standard.

Meanwhile, Kevin has < http://groups.google.com/group/serverjs/browse_thread/thread/ed8fb8a9a67ce292 hinted > that Bespin may eventually have a JavaScript backend running on Jack, which would be an impressive foothold for the eventual JavaScript standard module library.

So, if last year was the year of JavaScript module struggles, this year looks like it will be the year of JavaScript module success.

->>

The technical details are on the < https://wiki.mozilla.org/ServerJS/Modules/SecurableModules "Securable Modules" > wiki page.  The general idea is that modules receive a "require" function for getting other modules with both absolute and relative identifiers, an "exports" object which the module shares with other modules, and an "environment" object for modules that use dependency injection, those things that ultimately provide IO in secured sandboxes.

A module would look like:
">
 var file = require('file');
 exports.foo = function (bar) {
  return file.File(bar, 'r');
 };
/>

Secure module loaders would prevent tampering with the primordials and the global scope by creating module factory functions that receive those three variables under a hermetic bell.  A sandbox would be a group of secured singleton modules produced by calling the module factory functions, and sandboxes can create smaller sandboxes and share loaders to improve performance without "leaking" capabilities.  If you're used to dependency injection modules, the difference is that the only security boundary is at the sandbox interface, and instead of instantiating modules with an explicit list of its required modules, you inject capabilities in the environment and all modules in that environment are loaded on demand and have access to those capabilities.  The hermetic bell is a special evaluator to be provided by the JavaScript engine that runs programs in an alternate transitively frozen global scope.

Enjoy!

