<?xml version='1.0' encoding='UTF-8'?>
<ns0:entry xmlns:ns0="http://www.w3.org/2005/Atom"><ns0:id>tag:blogger.com,1999:blog-3618780804544792727.post-441263707016497688</ns0:id><ns0:author><ns0:name>Kris Kowal</ns0:name><ns0:email>cowbertvonmoo@gmail.com</ns0:email><ns0:uri>http://www.blogger.com/profile/01443956999129365941</ns0:uri></ns0:author><ns0:content type="html">
&lt;p&gt;On another note, I didn't finish Swil on time.  I'll be working on it over the summer.&lt;/p&gt;
&lt;p&gt;My attempt (blind stab) to build the syntax evaluation and apply, especially in the absence of a complete parser, revealed some conceptual problems, including a syntax collision, and ultimately didn't work in many cases.&lt;/p&gt;
&lt;p&gt;As for the syntax collision, anonymous functions in Swil will require an additional character.  My original concept for the syntax, &lt;tt&gt;(parameters): routine&lt;/tt&gt;, doesn't pan out because it collides with assignment to various kinds of sequences, and even to parenthesized single element evaluations.  So, with an added dot, &lt;tt&gt;.(parameters): arguments&lt;/tt&gt; will have to suffice.&lt;/p&gt;
&lt;p&gt;As for making the evaluation system work, I'm considering the implications of merging the &lt;tt&gt;context&lt;/tt&gt; and &lt;tt&gt;syntax&lt;/tt&gt; structures, and making sure that application (&lt;tt&gt;apply&lt;/tt&gt;) never directly calls a named function.  Rather, &lt;tt&gt;apply&lt;/tt&gt; will look up a &lt;tt&gt;context&lt;/tt&gt; corresponding to the &lt;tt&gt;operator&lt;/tt&gt;, then apply it against the &lt;tt&gt;operand&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Another issue I ran into was that function calls cannot inherently be &lt;tt&gt;generators&lt;/tt&gt;.  Normal function calls lend a user to believe that the function values evaluate expediently.  I may introduce an &lt;tt&gt;iterate&lt;/tt&gt; built-in for iterative evaluation of a function call.  I may do something else, but my priority will be to make instantaneous evaluation work first.&lt;/p&gt;
&lt;p&gt;I also look forward to implementing &lt;tt&gt;types&lt;/tt&gt;, &lt;tt&gt;casting&lt;/tt&gt;, &lt;tt&gt;function overload&lt;/tt&gt;, &lt;tt&gt;pattern matching&lt;/tt&gt;, and &lt;tt&gt;grammar matching&lt;/tt&gt; eventually.&lt;/p&gt;
&lt;p&gt;I hope to have minimal functionality ready for the function programming competition soon.&lt;/p&gt;
</ns0:content><ns0:updated>2008-09-30T13:56:14.483-07:00</ns0:updated><ns0:published>2005-06-16T02:10:00.001-07:00</ns0:published><ns0:title type="text">Swil</ns0:title><ns0:link href="http://askawizard.blogspot.com/feeds/441263707016497688/comments/default" rel="replies" title="Post Comments" type="application/atom+xml" /><ns0:link href="http://www.blogger.com/comment.g?blogID=3618780804544792727&amp;postID=441263707016497688" rel="replies" title="0 Comments" type="text/html" /><ns0:link href="http://www.blogger.com/feeds/3618780804544792727/posts/default/441263707016497688" rel="edit" type="application/atom+xml" /><ns0:link href="http://www.blogger.com/feeds/3618780804544792727/posts/default/441263707016497688" rel="self" type="application/atom+xml" /><ns0:link href="http://askawizard.blogspot.com/2005/06/swil_16.html" rel="alternate" title="Swil" type="text/html" /></ns0:entry>